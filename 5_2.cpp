/*Дан дек D. Удалить последний нулевой элемент дека. Если нулевых элементов нет, 
то дек не изменять. Использовать алгоритм find с обратными итераторами и функцию-член erase.
Указание. Алгоритм find может возвращать обратный итератор, однако функция-член erase 
не позволяет его использовать для удаления элемента. Необходимо перейти от обратного
итератора r к связанному с ним обычному итератору, используя функцию-член обратного
итератора r.base(). При этом следует учитывать, что функция r.base() возвращает итератор,
связанный с элементом, следующим за тем, с которым связан обратный итератор r. Поэтому 
в функции-члене erase следует указать одно из следующих выражений (предполагается, 
что r — это обратный итератор, который вернул алгоритм find, и этот итератор отличен от rend): 
--r.base() или (++r).base()
*/

#include <iostream>
#include <deque>
#include <algorithm>
#include <sstream>
#include <string>

using namespace std;

int main() {    
    deque<int> D;
    string input_line;
    
    cout << "Введите элементы дека D (через пробел):" << endl;
    getline(cin, input_line);
    
    stringstream ss(input_line);
    int num;
    while (ss >> num) {
        D.push_back(num);
    }
    
    if (D.empty()) {
        cout << "Ошибка: дек пустой!" << endl;
        return 1;
    }
    
    cout << "Исходный дек D: ";
    for (auto x : D) cout << x << " ";
    cout << endl;
    
    auto rit = find(D.rbegin(), D.rend(), 0);
    
    if (rit != D.rend()) {
        D.erase((++rit).base());
        cout << "Дек D после удаления последнего нуля: ";
        for (auto x : D) cout << x << " ";
    } else {
        cout << "Нулевых элементов не найдено, дек не изменен";
    }
    cout << endl;
    
    return 0;
}